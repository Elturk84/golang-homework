пакет основной
  
импорт  " fmt"

func main() {
    fmt.Println (Умножить (0.0013, 2.12))
    fmt.Println (Fibonacci1 ( 8))
    fmt.Println (Fibonacci2 ( 9))

    var a = [] float64 {5, 4, 9, 7, 0}
    
    bubble_sort(a)
    fmt.Println(a)
    var b = [] int {1, 2, 3, 4, 1, 2, 2, 3, 2}
    fmt.Println (unique_count ( b))

}

  
func  Multiply (a, b  float64 ) float64 {
    var sum float64 = 0

    для  i: = b; i> > 0 ; i = i-0.0001{
    	sum  =  сумма  +  a
    }
    возвращаемая  сумма / 10000
}

func  Fibonacci1 (позиция  int ) int {
	var  f1, f2, fsum  int  =  0, 1, 0
	если  позиция  = =  1 {
		fsum = f1
	}
	если  позиция  = =  2{
		fsum = f2
	}
	для  i: = 2; i< позиция; I ++{
		fsum = f1 + f2
		f1 = f2
		f2 = fsum
	}
	возвращение  fsum
}

func  Fibonacci2 (позиция  int ) int{
	если  позиция  = =  1{
		возврат  0
	}
	если  позиция  = =  2{
		возвращение  1
 } остальное{
		возврат  Fibonacci2 (Позиция  -  1 ) +  Fibonacci2 ( позиция - 2)
	}
}

func bubble_sort (a[] float64){
	var x float64
	для  i: = 0; i< len (a ); i ++{
		для  j: = len (a) - 1 ; j>> i ; j --{
			если  a [ j-1] > >  a [ j]{
				x = a[j-1]
				a [ j - 1] =  a [ j]
				a[j] = x	
			}
		}
	}
}

func bubble_sort2 (a[] int){
	var x int
	для  i: = 0; i< len (a ); i ++{
		для  j: = len (a) - 1 ; j>> i ; j --{
			если  a [ j-1] > >  a [ j]{
				x = a[j-1]
				a [ j - 1] =  a [ j]
				a[j] = x	
			}
		}
	}
}

func  unique_count ( a [] int) int{
	var sum_uniq int = 1
	bubble_sort2(a)
	для  i: = 1; i< len (a ); i ++{
		если  a [ i-1]!= a[i]{
			sum_uniq++
		}
	}
	возврат  sum_uniq

}
© 2020 GitHub, Inc.
Условия
Конфиденциальность
Безопасность
Статус
Справка
Связаться С GitHub
Цены
API-ИНТЕРФЕЙС
Обучение
Блог
О нас
